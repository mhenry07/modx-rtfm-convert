<?php
/**
 * @author: Mike Henry
 */

namespace RtfmConvert\HtmlTransformers;


use RtfmConvert\PageData;

class FormattingElementHtmlTransformer extends AbstractHtmlTransformer {

    // note: using wrapInner inside each since it seems to cause issues with multiple matches
    public function transform(PageData $pageData) {
        $this->generateStatistics($pageData);
        $qp = $pageData->getHtmlQuery();

        $pageData->beginTransform($qp);
        $fonts = $qp->find('font');
        $expectedDiff = -$fonts->count();
        $fonts->contents()->unwrap();
        $pageData->checkTransform('font', $qp, $expectedDiff);

        $map = array(
            'b' => '<strong></strong>',
            'i' => '<em></em>',
            'tt' => '<code></code>');
        foreach ($map as $selector => $replace) {
            $pageData->beginTransform($qp);
            $qp->find($selector)->each(
                function ($index, $item) use ($replace) {
                    qp($item)->wrapInner($replace)->contents()->unwrap();
                }
            );
            $pageData->checkTransform($selector, $qp, 0);
        }
        return $qp;
    }

    // TODO: stats for unhandled formatting elements
    protected function generateStatistics(PageData $pageData) {
        $addStat = function ($selector, $options = array()) use ($pageData) {
            $query = $pageData->getHtmlQuery($selector);
            if ($query->count() > 0)
                $pageData->addQueryStat($selector, $query, $options);
        };

        $selectors = array(
            'font' => 'stripped tag', 'b' => 'to strong', 'i' => 'to em');
        foreach ($selectors as $selector => $msg)
            $addStat($selector,
                array(self::TRANSFORM_ALL => true,
                    self::TRANSFORM_MESSAGES => $msg));
        $addStat('tt',
            array(self::TRANSFORM_ALL => true,
                self::TRANSFORM_MESSAGES => 'to code',
                self::WARN_IF_FOUND => true));

        // non-transformed
        $addStat('hr');
        $addStat('del', array(self::WARN_IF_FOUND => true,
                self::WARNING_MESSAGES => 'del tags may have been erroneously generated by confluence'));
        $addStat('ins', array(self::WARN_IF_FOUND => true));
    }
}
